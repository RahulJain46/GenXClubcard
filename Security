Injection:
 Now this attacker is going to issue a malicious request. It's important to understand that this is normally just an HTTP request and the malicious payload might be part of the query string or might be part of a form variable posted to the website. All the attacker has done is manipulate part of an otherwise legitimate request. Now the website takes that request and it converts it into a query. What the attacker is trying to do in a SQL Injection attack is modify that query such that it performs an action in the database that it was not originally intended to do. So, for example, accesses data that the page they hit was not actually designed to do. Now the database gets that query and it responds with an output.
 Prevent :
 
  that you'll see mentioned multiple times throughout this course, and that is to Whitelist untrusted data. So we just looked at what untrusted data is. That's what comes from external users and we have no control over what they pass us. 
  The other really big one for Injection is parameterization of statements. So particularly when we're talking about SQL Injection, what we're really talking about is saying, hey, how can we keep our query, and again, on the previous slide that was a SELECT * FROM Widget, how can we keep that guy separate from the untrusted data, because the risk really happens when the untrusted data breaks out of that parameter context and enters the query context, so it no longer becomes a piece of data, it actually becomes part of the SQL statement. So we have this paradigm within databases called parameterization
  The other big thing that can be done is really fine-tuning the database permissions. So, for example, the page which allows someone to log in, does it actually need to be able to read, say, financial data for the user or can we make sure that when someone hits the login page and that web application connects to the database, that it uses a SQL account that only has access to the tables and the columns it needs. That is the "principle of least privilege", give each component of the system only the access rights to the other parts that it absolutely positively needs. Excessive rights very frequently kill our security and open up some serious risks such as SQL Injection.
  
  Broken Authentication and Session Management:
  
