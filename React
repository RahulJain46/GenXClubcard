How to render static html from external resource : 
dangerouslySetInnerHTML is React’s replacement for using innerHTML in the browser DOM. In general, setting HTML from code is risky because it’s easy to inadvertently expose your users to a cross-site scripting (XSS) attack. So, you can set HTML directly from React, but you have to type out dangerouslySetInnerHTML and pass an object with a __html key, to remind yourself that it’s dangerous. 


React lifecycle methods :

Mounting --

Render : 
The render() function should be pure, meaning that it does not modify component state, it returns the same result each time it’s invoked, and it does not directly interact with the browser.

constructor : 
you should call super(props) before any other statement. Otherwise, this.props will be undefined in the constructor, which can lead to bugs.

The constructor is the right place to initialize state. To do so, just assign an object to this.state; don’t try to call setState() from the constructor. The constructor is also often used to bind event handlers to the class instance.
componentWillMount():
componentWillMount() is invoked just before mounting occurs. It is called before render(), therefore calling setState() synchronously in this method will not trigger an extra rendering. Generally, we recommend using the constructor() instead.
App configuration in your root component.
Can call setState: Don’t. Use default state instead.

omponentDidMount():
componentDidMount() is invoked immediately after a component is mounted.
This method is a good place to set up any subscriptions
If you need to load data from a remote endpoint, this is a good place to instantiate the network request.
Most Common Use Case: Starting AJAX calls to load in data for your component.

Can call setState: Yes.


componentWillReceiveProps():
 is invoked before a mounted component receives new props. If you need to update the state in response to prop changes 
 Most Common Use Case: Acting on particular prop changes to trigger state transitions.

Can call setState: Yes.

 shouldComponentUpdate():
 Use shouldComponentUpdate() to let React know if a component’s output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.
 Most Common Use Case: Controlling exactly when your component will re-render.

Can call setState: No.

 componentWillUpdate()
 componentWillUpdate() is invoked just before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. 
 Most Common Use Case: Used instead of componentWillReceiveProps on a component that also has shouldComponentUpdate (but no access to previous props).

Can call setState: No.


 componentDidUpdate() is invoked immediately after updating occurs. This method is not called for the initial render.

Use this as an opportunity to operate on the DOM when the component has been updated. This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).
Most Common Use Case: Updating the DOM in response to prop or state changes.

Can call setState: Yes.


To understand immutable data you need to understand that in JavaScript non-primitive types (objects, arrays, functions…) are passed by reference and primitive types (string, number, boolean, symbol, null and undefined) are passed by value. This means that primitive types are immutable by default and you can’t change them. Instead, when you pass a primitive type to another variable, it will get a new copy of that value.


Redux : 

Why redux - one way data flow , share of props and state in multiple components 
single store - helps in offline apps also .

drawbacks of mutations ?
implement default in redux reducer : switch statement .

subscribe : used to listen all set change .
coonect accept four paramters .
context API 
redux persist 
store all the state in localstorage and see what is coming : localstorage.setItem("key", JSON.stringify(state))

initialize the state , can be two levels :  app level and in reducer default .

Server Side rendering : 

First, the user requests a web page. They either do this by opening it in their browser or their mobile device or a screen reader or any device. The server that you're running gets the request, and first it queries the databases and APIs that hold the information it needs: stuff like your user info or a list of your contacts, etc. Next, rather than just sending the HTML over, the server asks the application for the HTML it would render if the server gave it the information it just looked up. The server then renders that HTML and sends it to the client. The actual JavaScript code isn't there, it's just looking at what would have happened if the JavaScript code would have run. The client gets the HTML onto their device and the application renders, not the interactivity, but just what the user would see. Nonetheless, this allows the user to begin enjoying the content. Sometimes we want to interact with an application right away, but sometimes we don't have to. Sometimes there's new information and updates from our friends that we want to spend 2 minutes reading. While we're enjoying this visual content, our client then requests the JavaScript, that makes the application actually live, from the server and it starts the application up on the client. Now the cool part is that when the client runs the JavaScript, if it was the same JavaScript used to render the HTML that made up your application, the code will actually be able to recognize that, and it will kind of graft the application logic to the existing HTML without re-rendering it. Then at this point, the application is effectively fully loaded, and the user gets the interactive content a few seconds after their initial visual content. So, when you're on your phone and you go to an isomorphic website, this is what happens. And this is the process we'll be undertaking when we code our application in the practical parts of this course. 


React DOM server :

We take our initial state and we load the top-level component into Express or whatever is serving our application and it outputs static HTML. It doesn't need the actual DOM to do it, that's why it's the server version of React DOM. So, given a state and a parent component, it generates static markup. It does this easily because React already has a virtual DOM it uses for optimizations, but this can also be used to render an application's final HTML with no actual DOM or browser running. It doesn't have any dependencies on the window or other features that only exist in the browser, so we can happily use it in our Express file

Elements have a type, which is the most important attribute, and some properties. There is also a particular property, called children, that is optional and represents the direct descendant of the element.

The type is important because it tells React how to deal with the element itself. If the type is a string, the element represents a DOM node, while if the type is a function, the element is a component.

reconciliation:
When the type of the element is a function, React calls it, passing the props to get back the underlying elements. It keeps on performing the same operation recursively on the result until it gets a tree of DOM nodes that React can render on the screen. This process is called reconciliation, and it is used by both React DOM and React Native to create the user interfaces of their respective platforms

react: Implements the core features of the library
react-dom: Contains all the browser-related features

a function that changes the state of an application, or modifies variables defined in the upper scope, or a function that touches external entities, such as the DOM, is considered impure. Impure functions are harder to debug, and most of the time it is not possible to apply them multiple times and expect to get the same result.


Binding a function inside the render method has, in fact, an unexpected side-effect, because the arrow function gets fired every time the component is rendered (which happens multiple times during the lifetime of the application).

Firing a function inside the render multiple times, even if it is not optimal, it is not a problem by itself.

The issue is that, if we are passing the function down to a child component, it receives a new prop on each update, which leads to inefficient rendering, and that represents a problem – especially if the component is pure

If we pass any function as a second parameter of the setState method, it gets fired when the state is updated, and the component has been rendered.

React JS - 
React is a javascript liberary which gives user interface.
It is decalrative in nature means we tell react what we want instead how can be done .

Rendering two components : 
React.fragment 
OR
<div>
  <First>
  <second>
</div>
OR
<>
</>

Passing props from parent to child and child to parent :
https://jscomplete.com/playground/rgs1.6

///pure functions - 
functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs.
function sum(a, b) {
  return a + b;
}

not pure func- 

function withdraw(account, amount) {
  account.total -= amount;
}

setState() that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:

Virtual dom : 
Browser DOM is a browser object 
Virtual DOM is a React object
- A lightweight represntation of the browser DOM
- in-memory tree data structure of plan JS objects
- Manipulations extrmely fast compared to modifying the browser DOM
- Created completely from scratch on every setState .

Diffing algo will detect those nodes that are changed - 
- update the entire sub tree if diffing detects that two elemts are of different types
- using key you can hint child elemnt as stable

redux - middleware : 
provides the capability to run code after an action is dispatched , but before it reaches the render .
- third party extension point 
- eg logging , async calls 
middelware - 
forms pipleline that wraps around the dispatch()
pass action onwards
restart the dispatch pipeline
access the store data.

it is typically used for  - 
inspecting the actions and the state.
modify the action
dispatch other action
stop actions from reaching the reducers

Thunk - 

middleware that allows you to write action creator that returns a function instead of a action
- can be used to deplay the dispatch of an action
- dispatch only if a certain condition is met
useful for complex sync logic -
 multiple dispatch 
 conditional dispatch
 simple async logic
 



Questiopns : 
1. Lifecycle methods,
2. ES6 new features
3. local vs session storage
4. what is DOM vs virtual DOM .
5. componentDidUpdate : can we do setstate in this method
6. setstate in render method ? 
