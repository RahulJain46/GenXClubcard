Microservices means :
It does only one thing.
scope of functionality , not lines of codes .
services :

Independent deployable component 
SOA : modularity and message based communication 
microservices force you to be more agile 

Monolithic is where whole software or service in one project , 
dividing monolithic into small parts called microservices 

Advantage : smaller team , easy to manage , quicker to test and develop 
solve system which are too big


Monolithic : 
props - 
simple to deploy
simple to test 
simple to scale
simple to build 

cons :
new team member productivity 
growing teams
code harder to undertand 
no emerging technology 
scale for bad reasons
pverloaded containers
huge database 

Microservices : 
See the problem -> divide it 
Domain driven design - 
Example - Domain - Ecommerce 
          Subdomain - User , order, product 
          
          they will have their own database and own data and codebase
         
across the subdomain - consistency is imp.
eventual consistency 
capture data change
event sourcing 
Akka, kafta 

Subdomain service published the event and other service consume the event and uodate the data.
In case of multiple microservices , we need to maintain single UI which interact with different services : 
two ways - 
1. server side loading : composing HTML fragments developed by multiple microservice team .
2. client side composition : 

for comunication between the services :
remote procedure invocation and messaging 


RPC :

Request and reply based protocol
can be done sync and async 

Messaging : 
can use broker or channel for communication 
one service pushes the changes and other subscripte to it 
they should be loosly coupled .
protocol Format exchange b/w services -
binary / text 
Text - XML, JSON, YMAL - human reable, easy to debug , easy to implement 






         
          
          
          
          
          

