Best Practices for Speeding Up Your Web Site

Combined files are a way to reduce the number of HTTP requests by combining all scripts into a single script, and similarly combining all CSS into a single stylesheet. Combining files is more challenging when the scripts and stylesheets vary from page to page, but making this part of your release process improves response times.

CSS Sprites are the preferred method for reducing the number of image requests. Combine your background images into a single image and use the CSS background-image and background-position properties to display the desired image segment.

Caching static content at the edge, like images and scripts, is only the beginning in terms of offloading requests from the origin and giving users the best experience. Dynamic content has long been thought of as a web resource that can serve different content for the same URI (Uniform Resource Indicator). A common misconception is that this content is always non-cacheable. When you break it down further, you realize that often times there are specific conditions that need to be met to produce different content, and that these conditions can be predefined. Caching more content not only reduces page load times, providing a more responsive site for its users, but also frees up computing cycles at you origin infrastructure to service transactional requests such as inventory checks, adds to the cart, and check-out more effectively.

Dynamic Page Caching (DPC) enables the caching of HTML pages based on request path, query strings, cookies, and request headers. Using any combination of attributes from an HTTP Request, Akamai will decide when and how to cache the responses and serve them. These attributes define the conditions that need to be met in order to serve "dynamic" pages from cache, while other requests that must go to the origin, will continue to do so.
A common use case is that of the anonymous user. In the example of an e-Commerce store, users who are not logged-in often see the same content and represent a large portion of hits to the site. Depending on the site design, these users' empty shopping cart and "Log In / Register" message in the header may be the same for all anonymous users. In this case, understanding if the user is anonymous based on attributes of the HTTP request will allow those users be served cached content. 

Asynchronous Javascript and XML (Ajax) – Utilize Ajax to dynamically create multiple page components, which also allows for caching responses in various types of storage including sessionStorage and localStorage. Cacheable Ajax is another method in reducing the number of requests sent to origin servers.

Add an Expires or a Cache-Control Header:

There are two aspects to this rule:

For static components: implement "Never expire" policy by setting far future Expires header
For dynamic components: use an appropriate Cache-Control header to help the browser with conditional requests
A first-time visitor to your page may have to make several HTTP requests, but by using the Expires header you make those components cacheable. This avoids unnecessary HTTP requests on subsequent page views. Expires headers are most often used with images, but they should be used on all components including scripts, stylesheets, and Flash components.
Browsers (and proxies) use a cache to reduce the number and size of HTTP requests, making web pages load faster. A web server uses the Expires header in the HTTP response to tell the client how long a component can be cached. 

Gzip Components:
The time it takes to transfer an HTTP request and response across the network can be significantly reduced by decisions made by front-end engineers
Compression reduces response times by reducing the size of the HTTP response.
web clients indicate support for compression with the Accept-Encoding header in the HTTP request.
If the web server sees this header in the request, it may compress the response using one of the methods listed by the client. The web server notifies the web client of this via the Content-Encoding header in the response
Servers choose what to gzip based on file type, but are typically too limited in what they decide to compress. Most web sites gzip their HTML documents. It's also worthwhile to gzip your scripts and stylesheets, but many web sites miss this opportunity. In fact, it's worthwhile to compress any text response including XML and JSON. Image and PDF files should not be gzipped because they are already compressed. Trying to gzip them not only wastes CPU but can potentially increase file sizes.

Put Stylesheets at the Top :
moving stylesheets to the document HEAD makes pages appear to be loading faster.

Put Scripts at the Bottom:
Avoid CSS Expressions:

Make JavaScript and CSS External:
Using external files in the real world generally produces faster pages because the JavaScript and CSS files are cached by the browser. JavaScript and CSS that are inlined in HTML documents get downloaded every time the HTML document is requested.
 The only exception where inlining is preferable is with home pages, 
 
 Reduce DNS Lookups:
 The Domain Name System (DNS) maps hostnames to IP addresses
 DNS lookups are cached for better performance. This caching can occur on a special caching server, maintained by the user's ISP or local area network, but there is also caching that occurs on the individual user's computer. The DNS information remains in the operating system's DNS cache (the "DNS Client service" on Microsoft Windows). Most browsers have their own caches, separate from the operating system's cache. As long as the browser keeps a DNS record in its own cache, it doesn't bother the operating system with a request for the record.
 When the client's DNS cache is empty (for both the browser and the operating system), the number of DNS lookups is equal to the number of unique hostnames in the web page. This includes the hostnames used in the page's URL, images, script files, stylesheets, Flash objects, etc. Reducing the number of unique hostnames reduces the number of DNS lookups.
 Reducing the number of unique hostnames has the potential to reduce the amount of parallel downloading that takes place in the page. Avoiding DNS lookups cuts response times, but reducing parallel downloads may increase response times. My guideline is to split these components across at least two but no more than four hostnames. This results in a good compromise between reducing DNS lookups and allowing a high degree of parallel downloads.
 
 Minify JavaScript and CSS:
 Minification is the practice of removing unnecessary characters from code to reduce its size thereby improving load times. When code is minified all comments are removed, as well as unneeded white space characters (space, newline, and tab). In the case of JavaScript, this improves response time performance because the size of the downloaded file is reduced.
 
 Avoid Redirects:
 Remove Duplicate Scripts:
 
 
 
Avoid Empty Image src:
cause the same effect: browser makes another request to your server.

Make favicon.ico Small and Cacheable:

When I use the term “favicon” I’m referring to an icon that is associated with a particular website,
Optimize CSS Sprites:
Arranging the images in the sprite horizontally as opposed to vertically usually results in a smaller file size.
"Be mobile-friendly" and don't leave big gaps between the images in a sprite. This doesn't affect the file size as much but requires less memory for the user agent to decompress the image into a pixel map.

Use GET for AJAX Requests:
Post-load Components:
Minimize the Number of iframes:
No 404s:
Reduce Cookie Size:

 Use Cookie-free Domains for Components:
 
