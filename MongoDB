Create the mongoDB : 
How to show db in mongo : 
how to see instances in mongo running : 

indexes have their price: every write (insert, update, or delete) will take longer for every
index you add. This is because MongoDB has to update all your indexes whenever your
data changes, as well as the document itself


How do you back up and restore data in MongoDB?

Backing up and restoring data in MongoDB is a critical task for data recovery, migration, and disaster management. MongoDB provides several tools and methods for these operations.

Backing Up Data
Using mongodump (Standard Tool):

mongodump creates a binary backup of the database.
Command to back up the entire database:
bash
Copy code
mongodump --host <host> --port <port> --out <backup_directory>
To back up a specific database:
bash
Copy code
mongodump --db <database_name> --out <backup_directory>
To back up a specific collection:
bash
Copy code
mongodump --db <database_name> --collection <collection_name> --out <backup_directory>
Add --username, --password, and --authenticationDatabase options for authentication if needed.
File System Snapshot (For Replica Sets):

If MongoDB is running with journaling enabled, you can take a snapshot of the data files directly from the file system.
Ensure the database is in a consistent state:
Freeze the database using the fsyncLock command.
Take a file system snapshot.
Release the lock using the fsyncUnlock command.
Command to lock:
bash
Copy code
db.fsyncLock()
Command to unlock:
bash
Copy code
db.fsyncUnlock()
MongoDB Atlas Backup (Cloud):

MongoDB Atlas provides automated backups.
Backups can be managed via the Atlas dashboard.
Snapshots can be downloaded for manual restoration.
Custom Backup Scripts:

Automate mongodump using cron jobs or CI/CD pipelines.
Schedule regular backups for critical databases.
Restoring Data
Using mongorestore (Standard Tool):

Restores a backup created by mongodump.
Command to restore an entire database:
bash
Copy code
mongorestore --host <host> --port <port> <backup_directory>
To restore a specific database:
bash
Copy code
mongorestore --db <database_name> <backup_directory>/<database_name>
To restore a specific collection:
bash
Copy code
mongorestore --db <database_name> --collection <collection_name> <backup_directory>/<database_name>/<collection_name>.bson
Use --drop to drop existing data before restoring to avoid duplicates.
File System Restore (For Replica Sets):

Copy the backed-up data files to the dbPath of the MongoDB instance.
Ensure MongoDB is stopped before replacing the files.
Start MongoDB after the files are restored.
Restoring From Atlas Backup:

Use the Atlas dashboard to restore a snapshot to an existing or new cluster.
Alternatively, download the snapshot and use mongorestore.
Additional Tips
Incremental Backups:

Use MongoDBâ€™s Oplog if running a replica set for incremental backups.
Requires capturing and replaying oplog entries to restore the database to a specific point in time.
Automated Backup Solutions:

Use third-party tools like Percona Backup for MongoDB, Ops Manager, or custom scripts.
Testing Restores:

Regularly test restore processes in a staging environment to ensure backups are valid and processes are reliable.
Compression:

Use compression for large backups to save space:
bash
Copy code
mongodump --archive=<backup_name.gz> --gzip
And restore using:
bash
Copy code
mongorestore --archive=<backup_name.gz> --gzip
This approach ensures a robust backup and restore strategy tailored to your environment and requirements.
