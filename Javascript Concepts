Localstorage and cookies :
Web storage is nothing but client side storage.Right now we are using cookies for the purpose of storing objects locally in client machine(in browser).
Cookies can able to store only 4k of data. For each domain browser will assign 4k of memory.
Each time browser has to send cookie along with HTTP request,it’s inefficient especially if you are using mobile device with not a lot of bandwidth.

A simple JavaScript API in the browser for storing Key value pairs that are persistent and you are not limited to 4k of memory.
All browsers today offering 5-10 MB of storage in every user’s browser.i.e., For each domain 5MB of local storage.
Example : 
localstorage.setItem("key1","value1"); 
var value=localstorage.getItem("key1");
alert(value);


Session storage : 
If you substitute the global variable sessionStorage everywhere you’ve used localStorage then your items are stored only during the browser session. So, as soon as that session is over (in other words, the user closes the browser window), the items in storage are removed.The sessionStorage object supports exactly the same API as Local Storage.

if you want to store arrays or objects into local storage use JSON.stringify to store the value and JSON.parse to retrive the value.

 == checks for value equality and === checks for both value and type equality. 
 
 
Tokenizing/Lexing
Breaking up a string of characters into meaningful (to the lan‐ guage) chunks, called tokens. 
