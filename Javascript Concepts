Localstorage and cookies :
Web storage is nothing but client side storage.Right now we are using cookies for the purpose of storing objects locally in client machine(in browser).
Cookies can able to store only 4k of data. For each domain browser will assign 4k of memory.
Each time browser has to send cookie along with HTTP request,it’s inefficient especially if you are using mobile device with not a lot of bandwidth.

A simple JavaScript API in the browser for storing Key value pairs that are persistent and you are not limited to 4k of memory.
All browsers today offering 5-10 MB of storage in every user’s browser.i.e., For each domain 5MB of local storage.
Example : 
localstorage.setItem("key1","value1"); 
var value=localstorage.getItem("key1");
alert(value);


Session storage : 
If you substitute the global variable sessionStorage everywhere you’ve used localStorage then your items are stored only during the browser session. So, as soon as that session is over (in other words, the user closes the browser window), the items in storage are removed.The sessionStorage object supports exactly the same API as Local Storage.

if you want to store arrays or objects into local storage use JSON.stringify to store the value and JSON.parse to retrive the value.

 == checks for value equality and === checks for both value and type equality. 
 
 
Tokenizing/Lexing
Breaking up a string of characters into meaningful (to the lan‐ guage) chunks, called tokens. 

Parsing
taking a stream (array) of tokens and turning it into a tree of nested elements, which collectively represent the grammatical structure of the program. This tree is called an “AST” (abstract syntax tree).
Engine
Responsible for start-to-finish compilation and execution of our JavaScript program.
Compiler
One of Engine’s friends; handles all the dirty work of parsing and code-generation
Scope
Another friend of Engine; collects and maintains a look-up list of all the declared identifiers (variables), and enforces a strict set of rules as to how these are accessible to currently executing code.
undeclared : look up occurance of first time and havn't notice , will throw this error.
ReferenceError : find a variable, anywhere in the nested scopes, this results in a ReferenceError being thrown by the engine.
Strict Mode, :  if the program is not running in “Strict Mode,”1 then the global scope will create a new vari‐ able of that name in the global scope, and hand it back to Engine.
One such behavior is that it disallows the automatic/implicit global variable creation

Both eval(..) and with cheat the otherwise author-time defined lex‐ ical scope by modifying or creating new lexical scope at runtime.
 in the pessimistic sense, most of those optimizations it would make are pointless if eval(..) or with are present, so it simply doesn’t perform the optimizations at all.

Lexical scope means that scope is defined by author-time decisions of where functions are declared. The lexing phase of compilation is es‐ sentially able to know where and how all identifiers are declared, and thus predict how they will be looked up during execution.
 Questions for Closure : (Event loop )
for (var i=1; i<=5; i++) { setTimeout( function timer(){
            console.log( i );
        }, i*1000 );
}

closure: 
closure is when a function remebers its lexical scope even when the function is executed outside the lexical scope .
//using closure 
for (var i=1; i<=5; i++) { (function(j){
setTimeout( function timer(){ console.log( j );
}, j*1000 ); })(i);
}
//using let 
for (let i=1; i<=5; i++) { setTimeout( function timer(){
            console.log( i );
        }, i*1000 );
}
To state it more simply, there are two requirements for the module pattern to be exercised:
1. There must be an outer enclosing function, and it must be invoked at least once (each time creates a new module instance).
2. The enclosing function must return back at least one inner func‐ tion, so that this inner function has closure over the private scope, and can access and/or modify that private state.

How to write optimized JavaScript
Order of object properties: always instantiate your object properties in the same order so that hidden classes, and subsequently optimized code, can be shared.
Dynamic properties: adding properties to an object after instantiation will force a hidden class change and slow down any methods that were optimized for the previous hidden class. Instead, assign all of an object’s properties in its constructor.
Methods: code that executes the same method repeatedly will run faster than code that executes many different methods only once (due to inline caching).
Arrays: avoid sparse arrays where keys are not incremental numbers. Sparse arrays which don’t have every element inside them are a hash table. Elements in such arrays are more expensive to access. Also, try to avoid pre-allocating large arrays. It’s better to grow as you go. Finally, don’t delete elements in arrays. It makes the keys sparse.
Tagged values: V8 represents objects and numbers with 32 bits. It uses a bit to know if it is an object (flag = 1) or an integer (flag = 0) called SMI (SMall Integer) because of its 31 bits. Then, if a numeric value is bigger than 31 bits, V8 will box the number, turning it into a double and creating a new object to put the number inside. Try to use 31 bit signed numbers whenever possible to avoid the expensive boxing operation into a JS object.


 A side effect is basically when we change the state of the program through an indirect means. I call this function, I get a direct result back, I get some direct effect back, but I also change something else about the state of my programs. 
 Closure is about maintaining state inside of a function. And when you maintain state in a way where that function can be called over and over again and get a different result each time, that can start to---there's some tension there between that and this notion of side effects. 
 a pure function is a function that has no side effects. It operates entirely on its own variables, its own state, or any of the things that are passed into it, so the arguments that are passed in and any of its own. It operates entirely on that and does not change anything. A pure function does not mean it doesn't access outside state. It means it doesn't change the outside state. So there're no side effect. So I could write a function that accesses a variable outside of itself, and that's totally okay. And that's not going to be considered at least from our perspective, for our intents and purposes, that's not going to be considered an impure function, except for the fact that that variable now can change from out underneath this function, so the overall reasonability is less pure. But the function itself we still call pure because it does not have a side effect. So if you take precautions to make sure that you do not have side effects in a particular piece of your program, then that piece of your program is pure.
Composition in this sense is about taking the output of one function and putting it directly in as the input to another function. So in other words, instead of calling one function and then calling another function, we're going to call one function, and its output is going to become at least part of the input for another function. And then the output of that could become part of the input for another function. That's what we mean by composition from a functional programming perspective at a very, very simple basic level.

 JavaScript is a compile language. Now it's not quite the same as how we compile our C++ or we compile our Java or things like that. There are certainly some differences in the way we deal with it, and the primary difference is that we don't distribute, that is, we don't send out the binary compiled form of our programs like we do with C++. We compile it into an exe and then we send it out to people, or you know, Java, we compile it into byte code and we send that out to the Java, JVM. We don't do that with JavaScript. We send the original source code program. So in a sense, it is compiled, but it's compiled every single time that it's run. But that doesn't mean it's not compiled. Now what do I mean by an interpreter? So the difference between a compiled language and an interpreted language is let me give you a comparison. 


Math.round(x)
The Number.EPSILON property represents the difference between 1 and the smallest floating point number greater than 1.
function areTheNumbersAlmostEqual(num1, num2) {
	return Math.abs( num1 - num2 ) < Number.EPSILON;
}
The stack overflow is eliminated because the event loop handles the recursion, not the call stack.
factorial :
(function fun(n){  return ((n>1)? n*fun(n-1): n ) })( 10 )
Primitive type (string, number, etc.) are passed by value and objects are passed by reference.

This defination :
Every function , while executing has reference to current call context .
where that function is called, when it's called and how it is called .

undeclared variables don’t even exist
undefined variables exist, but don’t have anything assigned to them
null variables exist and have null assigned to them


New in ES6 : 

Default Parameters in ES6 - 
Template Literals in ES6 - ${NAME}
Destructuring Assignment in ES6
Arrow Functions in ES6 - this will have the same value as in the context of the function, 
Block-Scoped Constructs Let and Const

convert number into float :
parseFloat(1).toFixed(1)


Check Array -
1. if (Array.isArray)
return Array.isArray(v);

2. v instanceof Array
3. if( Object.prototype.toString.call( someVar ) === '[object Array]' ) {
    alert( 'Array!' );
}

e.target keep an object that trigger 'click' event - li. In it's turn, the e.currentTarget refers to the element to which handler was attached. It's mean that e.currentTarget === ul === this.

tricks  : 
Null value check with ===, and typeof null is object .
toLowerCase, toString(), CharAt(), subString(), toFixed(), 
To check object has property or not :  hasOwnProperty .

copy object :

1.var newObj = JSON.parse(JSON.stringify(someObj));
2. var newObj = Object,assign({},someObj);




    

